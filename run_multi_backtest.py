# run_multi_backtest.py
from backtest.backtest_engine import run_backtest
from backtest.performance_report import generate_report
from backtest.chart import plot_backtest_results
import pandas as pd
import os

# Danh s√°ch ƒë·ªÉ l∆∞u t·∫•t c·∫£ b√°o c√°o
all_reports = []

# C·∫•u h√¨nh th·ª≠ nghi·ªám
symbols = ["BTCUSDT", "ETHUSDT", "DOGEUSDT", "XRPUSDT"]
intervals = ["5m", "15m", "1h"]
days_list = [30, 60, 90]
initial_balance = 1000

print("üöÄ B·∫ÆT ƒê·∫¶U CH·∫†Y BACKTEST NHI·ªÄU C·∫∂P & KHUNG TH·ªúI GIAN")

# T·∫°o th∆∞ m·ª•c l∆∞u k·∫øt qu·∫£
os.makedirs("backtest/results", exist_ok=True)

for symbol in symbols:
    for interval in intervals:
        for days in days_list:
            print(f"\nüîÑ Ch·∫°y backtest: {symbol} | {interval} | {days} ng√†y")
            
            # Ch·∫°y backtest
            results = run_backtest(symbol=symbol, interval=interval, days=days, initial_balance=initial_balance)
            
            if results is not None and len(results) > 0:
                # T·∫°o b√°o c√°o
                report = generate_report(results, initial_balance=initial_balance)
                
                # Th√™m th√¥ng tin v√†o b√°o c√°o
                report['symbol'] = symbol
                report['interval'] = interval
                report['days'] = days
                
                # L∆∞u v√†o danh s√°ch
                all_reports.append(report)
                
                # L∆∞u b√°o c√°o ri√™ng
                report_file = f"backtest/results/report_{symbol}_{interval}_{days}d.csv"
                results.to_csv(report_file.replace('.csv', '_signals.csv'), index=False)
                plot_backtest_results(results, save_path=report_file.replace('.csv', '.png'))
            else:
                print(f"‚ùå Kh√¥ng c√≥ t√≠n hi·ªáu cho {symbol} ({interval}, {days} ng√†y)")

# T·∫°o b√°o c√°o t·ªïng h·ª£p
if all_reports:
    summary_df = pd.DataFrame(all_reports)
    summary_df = summary_df[[
        'symbol', 'interval', 'days', 'total_signals', 'win_rate', 
        'profit_pct', 'max_drawdown', 'sharpe_ratio', 'final_balance'
    ]]
    summary_df.sort_values('profit_pct', ascending=False, inplace=True)
    
    # L∆∞u b√°o c√°o t·ªïng h·ª£p
    summary_df.to_csv("backtest/results/summary_report.csv", index=False)
    print("\n‚úÖ B√°o c√°o t·ªïng h·ª£p ƒë√£ l∆∞u t·∫°i: backtest/results/summary_report.csv")
    print("\nüìä TOP 10 K·∫æT QU·∫¢ T·ªêT NH·∫§T:")
    print(summary_df.head(10).to_string(index=False))
else:
    print("‚ùå Kh√¥ng c√≥ b√°o c√°o n√†o ƒë∆∞·ª£c t·∫°o")

print("\n‚úÖ HO√ÄN T·∫§T CH·∫†Y BACKTEST NHI·ªÄU C·∫∂P")